import java.util.*;

class Process {
    int id, arrivalTime, burstTime, priority, completionTime, turnaroundTime, waitingTime;

    // Constructor
    Process(int id, int arrivalTime, int burstTime, int priority) {
        this.id = id;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.priority = priority;
    }
}

public class PGreplacement1 {

    // Function to simulate Priority Scheduling
    public static void priorityScheduling(Process[] processes, int n) {
        // Sort processes by arrival time, then by priority (lower priority number means
        // higher priority)
        Arrays.sort(processes, Comparator.comparingInt((Process p) -> p.arrivalTime)
                .thenComparingInt(p -> p.priority));

        int currentTime = 0;
        double totalWaitingTime = 0, totalTurnaroundTime = 0;

        System.out.println("\nPriority Scheduling:");
        System.out
                .println("Process\tArrival Time\tBurst Time\tPriority\tCompletion Time\tTurnaround Time\tWaiting Time");

        // Loop through the processes and calculate the times
        for (Process process : processes) {
            if (currentTime < process.arrivalTime) {
                currentTime = process.arrivalTime;
            }
            process.completionTime = currentTime + process.burstTime;
            process.turnaroundTime = process.completionTime - process.arrivalTime;
            process.waitingTime = process.turnaroundTime - process.burstTime;
            currentTime = process.completionTime;

            // Display process details
            System.out.println(process.id + "\t\t" + process.arrivalTime + "\t\t" + process.burstTime + "\t\t"
                    + process.priority + "\t\t" + process.completionTime + "\t\t" + process.turnaroundTime + "\t\t"
                    + process.waitingTime);

            totalTurnaroundTime += process.turnaroundTime;
            totalWaitingTime += process.waitingTime;
        }

        System.out.println("\nAverage Turnaround Time: " + (totalTurnaroundTime / n));
        System.out.println("Average Waiting Time: " + (totalWaitingTime / n));
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input number of processes
        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();

        Process[] processes = new Process[n];

        // Input arrival time, burst time, and priority for each process
        for (int i = 0; i < n; i++) {
            System.out.println("Enter details for Process " + (i + 1) + ":");
            System.out.print("Arrival time: ");
            int arrivalTime = sc.nextInt();
            System.out.print("Burst time: ");
            int burstTime = sc.nextInt();
            System.out.print("Priority: ");
            int priority = sc.nextInt();
            processes[i] = new Process(i + 1, arrivalTime, burstTime, priority);
        }

        // Call Priority scheduling function
        priorityScheduling(processes, n);

        sc.close();
    }
}
