import java.util.Scanner;

public class best {

    // Function to implement Best Fit memory allocation
    public static void bestFit(int[] memory, int[] process) {
        // memory[] - array representing the memory blocks (available memory sizes)
        // process[] - array representing the process sizes

        // Loop over each process
        for (int i = 0; i < process.length; i++) {
            int bestIdx = -1;
            int minSize = Integer.MAX_VALUE;

            // Find the best fit for the current process
            for (int j = 0; j < memory.length; j++) {
                if (memory[j] >= process[i] && memory[j] - process[i] < minSize) {
                    minSize = memory[j] - process[i];
                    bestIdx = j;
                }
            }

            // Allocate memory if a suitable block is found
            if (bestIdx != -1) {
                System.out.println("P" + (i + 1) + " is allocated to memory block "
                        + (bestIdx + 1) + " of size " + memory[bestIdx]);
                memory[bestIdx] -= process[i]; // Reduce the size of the memory block after allocation
            } else {
                System.out.println("P" + (i + 1) + " with size " + process[i] + " cannot be allocated.");
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input the number of memory blocks
        System.out.print("Enter the number of memory blocks: ");
        int m = sc.nextInt();

        int[] memory = new int[m];

        // Input the sizes of each memory block
        System.out.println("Enter the sizes of " + m + " memory blocks:");
        for (int i = 0; i < m; i++) {
            memory[i] = sc.nextInt();
        }

        // Input the number of processes
        System.out.print("Enter the number of processes: ");
        int p = sc.nextInt();

        int[] process = new int[p];

        // Input the sizes of each process
        System.out.println("Enter the sizes of " + p + " processes:");
        for (int i = 0; i < p; i++) {
            process[i] = sc.nextInt();
        }

        // Call Best Fit Memory Placement function
        bestFit(memory, process);

        sc.close();
    }
}


import java.util.Scanner;

public class first {

    // Function to perform First Fit Memory Allocation
    public static void firstFit(int[] memory, int[] processes) {
        // Loop through all processes
        for (int i = 0; i < processes.length; i++) {
            boolean allocated = false;

            // Loop through all memory blocks to find the first available one
            for (int j = 0; j < memory.length; j++) {
                // Check if the memory block can accommodate the process
                if (memory[j] >= processes[i]) {
                    // Allocate the memory
                    System.out.println("Process " + (i + 1) + " of size " + processes[i]
                            + " is allocated to Memory Block " + (j + 1));
                    memory[j] -= processes[i]; // Decrease the memory block size after allocation
                    allocated = true;
                    break;
                }
            }

            // If process cannot be allocated
            if (!allocated) {
                System.out.println("Process " + (i + 1) + " of size " + processes[i] + " cannot be allocated.");
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input number of memory blocks and processes
        System.out.print("Enter the number of memory blocks: ");
        int n = sc.nextInt();
        int[] memory = new int[n];

        System.out.println("Enter the size of each memory block:");
        for (int i = 0; i < n; i++) {
            System.out.print("Memory Block " + (i + 1) + ": ");
            memory[i] = sc.nextInt();
        }

        System.out.print("Enter the number of processes: ");
        int m = sc.nextInt();
        int[] processes = new int[m];

        System.out.println("Enter the size of each process:");
        for (int i = 0; i < m; i++) {
            System.out.print("Process " + (i + 1) + ": ");
            processes[i] = sc.nextInt();
        }

        // Call First Fit Memory Allocation function
        firstFit(memory, processes);

        sc.close();
    }
}
