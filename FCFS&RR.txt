import java.util.*;

class Process {
    int id, arrivalTime, burstTime, completionTime, turnaroundTime, waitingTime, remainingTime;

    // Constructor for FCFS and Round Robin processes
    Process(int id, int arrivalTime, int burstTime) {
        this.id = id;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.remainingTime = burstTime; // For Round Robin
    }
}

public class CPUScheduling {

    // Function to simulate FCFS Scheduling
    public static void fcfsScheduling(Process[] processes, int n) {
        // Sort processes by arrival time
        Arrays.sort(processes, Comparator.comparingInt(p -> p.arrivalTime));

        int currentTime = 0;
        double totalTurnaroundTime = 0, totalWaitingTime = 0;

        System.out.println("\nFCFS Scheduling:");
        System.out.println("Process\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time");

        for (Process process : processes) {
            if (currentTime < process.arrivalTime) {
                currentTime = process.arrivalTime;
            }
            process.completionTime = currentTime + process.burstTime;
            process.turnaroundTime = process.completionTime - process.arrivalTime;
            process.waitingTime = process.turnaroundTime - process.burstTime;
            currentTime = process.completionTime;

            // Display process details
            System.out.println(process.id + "\t\t" + process.arrivalTime + "\t\t" + process.burstTime + "\t\t"
                    + process.completionTime + "\t\t" + process.turnaroundTime + "\t\t" + process.waitingTime);

            totalTurnaroundTime += process.turnaroundTime;
            totalWaitingTime += process.waitingTime;
        }

        System.out.println("\nAverage Turnaround Time: " + (totalTurnaroundTime / n));
        System.out.println("Average Waiting Time: " + (totalWaitingTime / n));
    }

    // Function to simulate Round Robin Scheduling
    public static void roundRobinScheduling(List<Process> processes, int timeQuantum) {
        int currentTime = 0;
        Queue<Process> queue = new LinkedList<>();
        int totalWaitingTime = 0, totalTurnaroundTime = 0;

        // Sort processes by arrival time
        processes.sort(Comparator.comparingInt(p -> p.arrivalTime));

        int index = 0;
        while (index < processes.size() || !queue.isEmpty()) {
            // Add processes that have arrived by the current time
            while (index < processes.size() && processes.get(index).arrivalTime <= currentTime) {
                queue.add(processes.get(index));
                index++;
            }

            if (!queue.isEmpty()) {
                Process currentProcess = queue.poll();

                // Execute the process for a time slice
                int timeToExecute = Math.min(timeQuantum, currentProcess.remainingTime);
                currentTime += timeToExecute;
                currentProcess.remainingTime -= timeToExecute;

                System.out.println("Time " + (currentTime - timeToExecute) + " - " + currentTime + ": P"
                        + currentProcess.id);

                // If the process is not finished, add it back to the queue
                if (currentProcess.remainingTime > 0) {
                    queue.add(currentProcess);
                } else {
                    // Calculate waiting time and turnaround time for completed process
                    int waitingTime = currentTime - currentProcess.arrivalTime - currentProcess.burstTime;
                    int turnaroundTime = currentTime - currentProcess.arrivalTime;
                    totalWaitingTime += waitingTime;
                    totalTurnaroundTime += turnaroundTime;
                }
            } else {
                currentTime++; // If no process is ready, just advance time
            }
        }

        // Print average waiting and turnaround time
        System.out.println("\nAverage Waiting Time: " + (double) totalWaitingTime / processes.size());
        System.out.println("Average Turnaround Time: " + (double) totalTurnaroundTime / processes.size());
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        while (true) {
            // Menu-driven option selection
            System.out.println("\n--- CPU Scheduling Algorithms ---");
            System.out.println("1. FCFS Scheduling");
            System.out.println("2. Round Robin Scheduling");
            System.out.println("3. Exit");
            System.out.print("Choose an option: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    // FCFS Scheduling
                    System.out.print("Enter the number of processes: ");
                    int n = sc.nextInt();

                    Process[] fcfsProcesses = new Process[n];
                    for (int i = 0; i < n; i++) {
                        System.out.print("Enter arrival time for process " + (i + 1) + ": ");
                        int arrivalTime = sc.nextInt();
                        System.out.print("Enter burst time for process " + (i + 1) + ": ");
                        int burstTime = sc.nextInt();
                        fcfsProcesses[i] = new Process(i + 1, arrivalTime, burstTime);
                    }

                    // Call FCFS scheduling function
                    fcfsScheduling(fcfsProcesses, n);
                    break;

                case 2:
                    // Round Robin Scheduling
                    System.out.print("Enter the number of processes: ");
                    int numProcesses = sc.nextInt();

                    List<Process> rrProcesses = new ArrayList<>();
                    for (int i = 0; i < numProcesses; i++) {
                        System.out.print("Enter arrival time for process " + (i + 1) + ": ");
                        int arrivalTime = sc.nextInt();
                        System.out.print("Enter burst time for process " + (i + 1) + ": ");
                        int burstTime = sc.nextInt();
                        rrProcesses.add(new Process(i + 1, arrivalTime, burstTime));
                    }

                    System.out.print("Enter time quantum: ");
                    int timeQuantum = sc.nextInt();

                    // Call Round Robin scheduling function
                    roundRobinScheduling(rrProcesses, timeQuantum);
                    break;

                case 3:
                    // Exit the program
                    System.out.println("Exiting program...");
                    sc.close();
                    return;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
